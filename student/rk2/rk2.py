# -*- coding: utf-8 -*-
"""rk2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dTxdCWUQVWobNxNdgAmcV5uFlJehnTON

## Рубежный контроль №2
Выполнил: Григорьев Е.А, группа ИУ5-21м

Вариант №1. Классификация текстов на основе методов наивного Байеса

### Датасет
На Kaggle.com найден newsgroup20-bbc-news  - содержит текст и его класс
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from typing import Dict, Tuple
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, balanced_accuracy_score
from sklearn.naive_bayes import MultinomialNB, ComplementNB, BernoulliNB
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
# %matplotlib inline

category = 'category'
text = 'text'

data = pd.read_csv('bbc-text.csv')
data = data[[category, text]]
data=data.dropna(axis=0,how='any')
data.head()

X_train, X_test, y_train, y_test = train_test_split(data[text], data[category], test_size=0.4, random_state=1)

def calc(v, c):
    model = Pipeline(
        [("vectorizer", v), 
         ("classifier", c)])
    
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    d = {'t': y_test, 'p': y_pred}
    df = pd.DataFrame(data=d)
    classes = np.unique(y_test)
    res = dict()
    
    for c in classes:
        temp_data_flt = df[df['t']==c]
        temp_acc = accuracy_score(
            temp_data_flt['t'].values, 
            temp_data_flt['p'].values)
        res[c] = temp_acc
    
    if len(res)>0:
        print('Points \t Accuracy')
    
    for i in res:
        print('{} \t {:.2%}'.format(i, res[i]))
    print('average: {}\n\n'.format(np.average(list(res.values()))))

classificators = [LogisticRegression(C=5.0), MultinomialNB(), ComplementNB(), BernoulliNB()]
vectorizers = [TfidfVectorizer(), CountVectorizer()]

for classificator in classificators:
  for vectorizer in vectorizers:
    calc(vectorizer, classificator)

"""### Вывод
На основе полученного можно сделать вывод, что лучшим методом в данной ситуации является ComplementNB с  CountVectorizer со средней точностью 0,98
"""